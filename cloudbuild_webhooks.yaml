# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - name: alpine
    args:
      - '-c'
      - |
        echo "***********************"
        echo "$_BRANCH_NAME"
        echo "***********************"
    id: branch name
    entrypoint: sh
  - name: gcr.io/cloud-builders/git
    args:
      - '-c'
      - |
        git clone https://$$GITHUB_USER:$$GITHUB_TOKEN@github.com/${_REPO} repo
        cd repo
        git checkout $_BRANCH_NAME
    entrypoint: bash
    secretEnv:
      - GITHUB_TOKEN
      - GITHUB_USER
  - name: 'hashicorp/terraform:1.0.0'
    args:
      - '-c'
      - |
        if [ -d "env/$_BRANCH_NAME/" ]; then
          cd env/$_BRANCH_NAME
          terraform init
        else
          echo "$_BRANCH_NAME environment not found" 
          exit 1
        fi
    dir: repo
    id: tf init
    entrypoint: sh
  - name: 'hashicorp/terraform:1.0.0'
    args:
      - '-c'
      - |
        if [ -d "env/$_BRANCH_NAME/" ]; then
          cd env/$_BRANCH_NAME
          terraform plan
        else
          echo "$_BRANCH_NAME environment not found" 
          exit 1
        fi
    dir: repo
    id: tf plan
    entrypoint: sh
  - name: 'hashicorp/terraform:1.0.0'
    args:
      - '-c'
      - |
        if [ -d "env/$_BRANCH_NAME/" ]; then
          cd env/$_BRANCH_NAME
          terraform apply -auto-approve -no-color
        else
          echo "***************************** SKIPPING APPLYING *******************************"
          echo "Branch '$_BRANCH_NAME' does not represent an oficial environment."
          echo "*******************************************************************************"
        fi
    dir: repo
    id: tf apply
    entrypoint: sh
timeout: 1200s
substitutions:
  _BRANCH_NAME: '${_REF##refs/heads/}'
  _REF: $(body.ref)
  _REPO: $(body.repository.full_name)
availableSecrets:
  secretManager:
    - versionName: 'projects/${PROJECT_ID}/secrets/github-token/versions/latest'
      env: GITHUB_TOKEN
    - versionName: 'projects/${PROJECT_ID}/secrets/github-user/versions/latest'
      env: GITHUB_USER
